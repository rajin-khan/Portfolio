---
import { getEntryBySlug, getCollection } from "astro:content";
import PostLayout from "../../layouts/post.astro";

// Define the static paths for dynamic routes
export async function getStaticPaths() {
  const posts = await getCollection("post");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { entry: post },
  }));
}

const { slug } = Astro.params;
const entry = await getEntryBySlug("post", slug);

if (!entry) {
  throw new Error(`Post not found: ${slug}`);
}

const { Content } = await entry.render();
const { title, description, date } = entry.data;
---

<PostLayout title={title} description={description} date={date}>
  <article class="prose dark:prose-invert mx-auto">
    <div class="flex items-center justify-between text-sm mb-6">
      <p class="text-gray-500 dark:text-gray-400">
        {
          new Date(date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })
        } · <strong>Rajin Khan</strong>
      </p>
      <button
        id="share-button"
        class="flex items-center gap-2 px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white rounded-full transition-all duration-300 border border-gray-200 dark:border-gray-700 hover:border-gray-400 dark:hover:border-gray-500 bg-white dark:bg-gray-800 hover:shadow-md"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path>
          <polyline points="16 6 12 2 8 6"></polyline>
          <line x1="12" y1="2" x2="12" y2="15"></line>
        </svg>
        <span>Share</span>
      </button>
    </div>
    <Content />
  </article>
  <section class="mt-10">
    <!-- Toggle Button -->
    <div class="flex justify-center mt-4">
      <button
        id="toggle-comments"
        class="flex items-center text-lg text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition"
      >
        <span>Show Comments</span>
        <span id="arrow" class="ml-2 transition-transform">↓</span>
      </button>
    </div>

    <!-- Comments Section (Initially Hidden) -->
    <div id="comments-section" class="hidden mt-6">
      <div id="giscus-container"></div>
    </div>

    <script>
      function getTheme() {
        return document.documentElement.classList.contains("dark")
          ? "dark_high_contrast"
          : "light";
      }

      function loadGiscus() {
        if (document.getElementById("giscus-container").children.length > 0)
          return;
        const theme = getTheme();
        const script = document.createElement("script");
        script.src = "https://giscus.app/client.js";
        script.setAttribute("data-repo", "rajin-khan/Portfolio");
        script.setAttribute("data-repo-id", "R_kgDON2W65A");
        script.setAttribute("data-category", "Announcements");
        script.setAttribute("data-category-id", "DIC_kwDON2W65M4Cm1Wm");
        script.setAttribute("data-mapping", "pathname");
        script.setAttribute("data-strict", "0");
        script.setAttribute("data-reactions-enabled", "1");
        script.setAttribute("data-emit-metadata", "0");
        script.setAttribute("data-input-position", "top");
        script.setAttribute("data-theme", theme);
        script.setAttribute("data-lang", "en");
        script.setAttribute("data-loading", "lazy");
        script.crossOrigin = "anonymous";
        script.async = true;

        document.getElementById("giscus-container").appendChild(script);
      }

      function updateGiscusTheme() {
        const theme = getTheme();
        const iframe = document.querySelector("iframe.giscus-frame");
        if (iframe) {
          (iframe as HTMLIFrameElement).contentWindow.postMessage(
            { giscus: { setConfig: { theme } } },
            "https://giscus.app"
          );
        }
      }

      // Share button functionality
      document
        .getElementById("share-button")
        .addEventListener("click", async () => {
          try {
            await navigator.clipboard.writeText(window.location.href);
            const button = document.getElementById("share-button");
            const originalText = button.innerHTML;
            button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
            <span>Copied!</span>
          `;
            // Add success state styles
            button.classList.add(
              "bg-green-50",
              "dark:bg-green-900/20",
              "text-green-600",
              "dark:text-green-400",
              "border-green-200",
              "dark:border-green-800"
            );

            setTimeout(() => {
              button.innerHTML = originalText;
              // Remove success state styles
              button.classList.remove(
                "bg-green-50",
                "dark:bg-green-900/20",
                "text-green-600",
                "dark:text-green-400",
                "border-green-200",
                "dark:border-green-800"
              );
            }, 2000);
          } catch (err) {
            console.error("Failed to copy URL:", err);
          }
        });

      document.addEventListener("DOMContentLoaded", () => {
        const toggleBtn = document.getElementById("toggle-comments");
        const commentsSection = document.getElementById("comments-section");
        const arrow = document.getElementById("arrow");

        toggleBtn.addEventListener("click", () => {
          const isHidden = commentsSection.classList.contains("hidden");
          commentsSection.classList.toggle("hidden");
          arrow.textContent = isHidden ? "↑" : "↓";
          toggleBtn.firstElementChild.textContent = isHidden
            ? "Hide Comments"
            : "Show Comments";

          if (isHidden) {
            loadGiscus();
          }
        });
      });

      const observer = new MutationObserver(updateGiscusTheme);
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    </script>
  </section>
</PostLayout>